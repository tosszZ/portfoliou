import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
from collections import Counter
import os
from datetime import datetime


class LyricsAnalyzerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Анализатор текстов песен")
        self.root.geometry("800x600")
        
        # Основные переменные
        self.filename = ""
        self.results_dir = ""
        
        # Создаем папку для результатов, если ее нет
        self.create_results_dir()
        
        # Создаем интерфейс
        self.create_widgets()
    
    def create_results_dir(self):
        """Создает папку для результатов анализа"""
        script_dir = os.path.dirname(os.path.abspath(__file__))
        parent_dir = os.path.dirname(script_dir)
        self.results_dir = os.path.join(parent_dir, "результаты анализа")
        os.makedirs(self.results_dir, exist_ok=True)
    
    def create_widgets(self):
        """Создает все элементы интерфейса"""
        # Стиль для кнопок
        style = ttk.Style()
        style.configure('TButton', font=('Arial', 10), padding=5)
        
        # Главный фрейм
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Фрейм для выбора файла
        file_frame = ttk.LabelFrame(main_frame, text="Выбор файла", padding="10")
        file_frame.pack(fill=tk.X, pady=5)
        
        # Поле для пути к файлу
        self.file_entry = ttk.Entry(file_frame, width=50)
        self.file_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 10))
        
        # Кнопка обзора
        browse_btn = ttk.Button(file_frame, text="Обзор...", command=self.browse_file)
        browse_btn.pack(side=tk.LEFT)
        
        # Фрейм для кнопок анализа
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(fill=tk.X, pady=5)
        
        # Кнопка анализа
        analyze_btn = ttk.Button(btn_frame, text="Анализировать", command=self.analyze_file)
        analyze_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        # Кнопка очистки
        clear_btn = ttk.Button(btn_frame, text="Очистить", command=self.clear_results)
        clear_btn.pack(side=tk.LEFT)
        
        # Фрейм для результатов
        result_frame = ttk.LabelFrame(main_frame, text="Результаты анализа", padding="10")
        result_frame.pack(fill=tk.BOTH, expand=True)
        
        # Текстовое поле для вывода результатов
        self.result_text = scrolledtext.ScrolledText(
            result_frame, 
            wrap=tk.WORD, 
            font=('Arial', 10), 
            padx=5, 
            pady=5
        )
        self.result_text.pack(fill=tk.BOTH, expand=True)
        
        # Статус бар
        self.status_var = tk.StringVar()
        self.status_var.set("Готов к работе")
        status_bar = ttk.Label(
            self.root, 
            textvariable=self.status_var, 
            relief=tk.SUNKEN, 
            anchor=tk.W
        )
        status_bar.pack(side=tk.BOTTOM, fill=tk.X)
    
    def browse_file(self):
        """Открывает диалог выбора файла"""
        initial_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        file_path = filedialog.askopenfilename(
            initialdir=initial_dir,
            title="Выберите файл с текстом песни",
            filetypes=(("Текстовые файлы", "*.txt"), ("Все файлы", "*.*"))
        )
        
        if file_path:
            self.filename = os.path.basename(file_path)
            self.file_entry.delete(0, tk.END)
            self.file_entry.insert(0, file_path)
            self.status_var.set(f"Выбран файл: {self.filename}")
    
    def clear_results(self):
        """Очищает результаты анализа"""
        self.result_text.delete(1.0, tk.END)
        self.status_var.set("Результаты очищены")
    
    def analyze_file(self):
        """Анализирует выбранный файл"""
        file_path = self.file_entry.get().strip()
        
        if not file_path:
            messagebox.showerror("Ошибка", "Пожалуйста, выберите файл для анализа")
            return
        
        # Проверяем расширение файла
        base, ext = os.path.splitext(file_path)
        if ext.lower() not in ['.txt', '.text']:
            file_path = base + '.txt'
        
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                lines = file.readlines()
                line_count = len(lines)
                text = ''.join(lines).lower()

            # Очистка текста от пунктуации
            punct = r'''!()-[]{};:\'",<>./?@#$%^&*_~'''
            cleaned_text = ''.join(char for char in text if char not in punct)

            # Анализ слов
            words = cleaned_text.split()
            word_count = len(words)
            unique_words = len(set(words))
            top_words = Counter(words).most_common(5)

            # Формируем отчет
            report = f"""Результаты анализа файла: {os.path.basename(file_path)}
Дата анализа: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Путь к файлу: {file_path}

Общая статистика:
├─ Количество строк: {line_count}
├─ Всего слов: {word_count}
└─ Уникальных слов: {unique_words}

Топ-5 самых частых слов:"""

            # Добавляем слова в отчет
            for i, (word, count) in enumerate(top_words, 1):
                report += f"\n{i}. {word.capitalize():<15} — {count} раз(а)"

            # Сохраняем отчет в файл
            result_filename = f"анализ_{os.path.splitext(os.path.basename(file_path))[0]}.txt"
            result_path = os.path.join(self.results_dir, result_filename)
            
            # Проверяем существование файла
            if os.path.exists(result_path):
                answer = messagebox.askyesno(
                    "Файл существует", 
                    f"Файл анализа '{result_filename}' уже существует!\nПерезаписать файл?"
                )
                if not answer:
                    self.status_var.set("Анализ отменен. Файл не был перезаписан.")
                    return
            
            with open(result_path, 'w', encoding='utf-8') as result_file:
                result_file.write(report)
            
            # Выводим результаты
            self.result_text.delete(1.0, tk.END)
            self.result_text.insert(tk.END, report)
            self.status_var.set(f"Анализ завершен. Результаты сохранены в: {result_path}")
            
        except FileNotFoundError:
            messagebox.showerror(
                "Ошибка", 
                f"Файл '{file_path}' не найден!\n"
                "Убедитесь, что файл существует и путь указан правильно."
            )
            self.status_var.set("Ошибка: файл не найден")
        except UnicodeDecodeError:
            messagebox.showerror(
                "Ошибка", 
                "Неверная кодировка файла!\n"
                "Рекомендуется сохранить файл в UTF-8."
            )
            self.status_var.set("Ошибка: неверная кодировка файла")
        except Exception as e:
            messagebox.showerror("Ошибка", f"Неизвестная ошибка: {e}")
            self.status_var.set(f"Ошибка: {str(e)}")


if __name__ == "__main__":
    root = tk.Tk()
    app = LyricsAnalyzerApp(root)
    root.mainloop()
