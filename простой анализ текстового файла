from collections import Counter
import os
from datetime import datetime

def analyze_lyrics(filename):
    # Получаем путь к директории скрипта
    script_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Получаем путь к родительской директории
    parent_dir = os.path.dirname(script_dir)
    
    # Создаем папку для результатов анализа, если ее нет
    results_dir = os.path.join(parent_dir, "результаты анализа")
    os.makedirs(results_dir, exist_ok=True)
    
    # Ищем файл во всех поддиректориях
    file_path = None
    for root, _, files in os.walk(parent_dir):
        if filename in files:
            file_path = os.path.join(root, filename)
            break
    
    if file_path is None:
        print(f"\nОшибка: файл '{filename}' не найден в поддиректориях!")
        print(f"Родительская директория для поиска: {parent_dir}")
        print("\nРекомендации:")
        print("1. Убедитесь, что файл находится в одной из подпапок родительской директории")
        print("2. Проверьте правильность имени файла и расширение (.txt)")
        print("3. Доступные поддиректории в родительской папке:")
        
        # Выводим список поддиректорий для помощи пользователю
        for root, dirs, _ in os.walk(parent_dir):
            if dirs:  # Если есть поддиректории
                print(f"- {os.path.relpath(root, parent_dir)}/")
                for d in dirs:
                    print(f"  └─ {d}/")
        return
    
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            # Читаем все строки файла
            lines = file.readlines()
            line_count = len(lines)
            
            # Объединяем строки в один текст для дальнейшего анализа
            text = ''.join(lines).lower()

        punct = r'''!()-[]{};:\'",<>./?@#$%^&*_~'''
        cleaned_text = ''.join(char for char in text if char not in punct)

        words = cleaned_text.split()
        word_count = len(words)
        unique_words = len(set(words))

        top_words = Counter(words).most_common(5)

        # Формируем отчет с красивым выводом
        report = f"""\nРезультаты анализа файла: {filename}
Дата анализа: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Путь к файлу: {file_path}

Общая статистика:
├─ Количество строк: {line_count}
├─ Всего слов: {word_count}
└─ Уникальных слов: {unique_words}

Топ-5 самых частых слов:"""

        # Добавляем слова в отчет с красивой нумерацией
        for i, (word, count) in enumerate(top_words, 1):
            report += f"\n{i}. {word.capitalize():<15} — {count} раз(а)"

        print(report)

        # Сохраняем отчет в файл
        result_filename = f"анализ_{os.path.splitext(filename)[0]}.txt"
        result_path = os.path.join(results_dir, result_filename)
        
        # Проверяем существование файла
        if os.path.exists(result_path):
            print(f"\nФайл анализа '{result_filename}' уже существует!")
            while True:
                choice = input("Перезаписать файл? (да/нет): ").strip().lower()
                if choice in ['да', 'д', 'yes', 'y']:
                    break
                elif choice in ['нет', 'н', 'no', 'n']:
                    print("Анализ отменен. Файл не был перезаписан.")
                    return
                else:
                    print("Пожалуйста, введите 'да' или 'нет'")
        
        with open(result_path, 'w', encoding='utf-8') as result_file:
            result_file.write(report)
        
        print(f"\nРезультаты сохранены в файл: {result_path}")

    except UnicodeDecodeError:
        print("\nОшибка: неверная кодировка файла!")
        print("Рекомендуется сохранить файл в UTF-8")
    except Exception as e:
        print(f"\nНеизвестная ошибка: {e}")

# Ввод имени файла
print("\nПрограмма анализа текстов песен")
print("Файл должен находиться в одной из поддиректорий родительской папки")
filename = input("Введите имя файла (например: 'песня.txt' или 'песня'): ").strip()
if not filename.endswith('.txt'):
    filename += '.txt'
analyze_lyrics(filename)
